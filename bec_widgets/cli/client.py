# This file was automatically generated by generate_cli.py

from bec_widgets.cli.client_utils import rpc_call, RPCBase, BECFigureClientMixin
from typing import Literal, Optional, overload


class BECWaveform1D(RPCBase):
    @rpc_call
    def add_scan(
        self,
        x_name: "str",
        x_entry: "str",
        y_name: "str",
        y_entry: "str",
        color: "Optional[str]" = None,
        label: "Optional[str]" = None,
        **kwargs
    ):
        """
        None
        """

    @rpc_call
    def add_curve(
        self,
        x: "list | np.ndarray",
        y: "list | np.ndarray",
        label: "str" = None,
        color: "str" = None,
        **kwargs
    ):
        """
        None
        """

    @rpc_call
    def remove_curve(self, *identifiers):
        """
        Remove a curve from the plot widget.
        Args:
            *identifiers: Identifier of the curve to be removed. Can be either an integer (index) or a string (curve_id).
        """

    @rpc_call
    def update_scan_curve_history(self, scanID: "str" = None, scan_index: "int" = None):
        """
        Update the scan curves with the data from the scan storage.
        Provide only one of scanID or scan_index.
        Args:
            scanID(str, optional): ScanID of the scan to be updated. Defaults to None.
            scan_index(int, optional): Index of the scan to be updated. Defaults to None.
        """

    @rpc_call
    def curves(self) -> "list":
        """
        Get the curves of the plot widget as a list
        Returns:
            list: List of curves.
        """

    @rpc_call
    def curves_data(self) -> "dict":
        """
        Get the curves data of the plot widget as a dictionary
        Returns:
            dict: Dictionary of curves data.
        """


class BECFigure(RPCBase, BECFigureClientMixin):
    @rpc_call
    def add_plot(
        self,
        widget_id: "str" = None,
        row: "int" = None,
        col: "int" = None,
        config=None,
        **axis_kwargs
    ) -> "BECWaveform1D":
        """
        None
        """

    @rpc_call
    def remove(
        self,
        row: "int" = None,
        col: "int" = None,
        widget_id: "str" = None,
        coordinates: "tuple[int, int]" = None,
    ) -> "None":
        """
        Remove a widget from the figure. Can be removed by its unique identifier or by its coordinates.
        Args:
            row(int): The row coordinate of the widget to remove.
            col(int): The column coordinate of the widget to remove.
            widget_id(str): The unique identifier of the widget to remove.
            coordinates(tuple[int, int], optional): The coordinates of the widget to remove.
        """
