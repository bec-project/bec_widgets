# This file was automatically generated by generate_cli.py

from typing import Literal, Optional, overload

from bec_widgets.cli.client_utils import BECFigureClientMixin, RPCBase, rpc_call


class BECWaveform1D(RPCBase):
    @rpc_call
    def set_x_label(self, label: "str"):
        """
        Set the label of the x-axis.
        Args:
            label(str): Label of the x-axis.
        """

    @rpc_call
    def set_y_label(self, label: "str"):
        """
        Set the label of the y-axis.
        Args:
            label(str): Label of the y-axis.
        """

    @rpc_call
    def set_x_scale(self, scale: "Literal['linear', 'log']" = "linear"):
        """
        Set the scale of the x-axis.
        Args:
            scale(Literal["linear", "log"]): Scale of the x-axis.
        """

    @rpc_call
    def set_y_scale(self, scale: "Literal['linear', 'log']" = "linear"):
        """
        Set the scale of the y-axis.
        Args:
            scale(Literal["linear", "log"]): Scale of the y-axis.
        """

    @rpc_call
    def set_x_lim(self, x_lim: "tuple") -> "None":
        """
        Set the limits of the x-axis.
        Args:
            x_lim(tuple): Limits of the x-axis.
        """

    @rpc_call
    def set_y_lim(self, y_lim: "tuple") -> "None":
        """
        Set the limits of the y-axis.
        Args:
            y_lim(tuple): Limits of the y-axis.
        """

    @rpc_call
    def set_grid(self, x: "bool" = False, y: "bool" = False):
        """
        Set the grid of the plot widget.
        Args:
            x(bool): Show grid on the x-axis.
            y(bool): Show grid on the y-axis.
        """

    @rpc_call
    def plot_data(self, data_x: "list | np.ndarray", data_y: "list | np.ndarray", **kwargs):
        """
        Plot custom data on the plot widget. These data are not saved in config.
        Args:
            data_x(list|np.ndarray): x-axis data
            data_y(list|np.ndarray): y-axis data
            **kwargs: Keyword arguments for the plot.
        """

    @rpc_call
    def remove(self):
        """
        Remove the plot widget from the figure.
        """

    @rpc_call
    def add_scan(
        self,
        x_name: str,
        x_entry: str,
        y_name: str,
        y_entry: str,
        color: Optional[str] = None,
        label: Optional[str] = None,
        symbol: Optional[str] = None,
        symbol_size: Optional[int] = None,
        symbol_color: Optional[str] = None,
        pen_width: Optional[int] = None,
        pen_style: Optional[Literal["solid", "dash", "dot", "dashdot"]] = None,
    ):
        """
        None
        """


class BECFigure(RPCBase, BECFigureClientMixin):
    @overload
    def add_widget(
        self,
        widget_type: "Literal['Waveform1D']" = "Waveform1D",
        widget_id: "str" = Ellipsis,
        row: "int" = Ellipsis,
        col: "int" = Ellipsis,
        config: "dict" = Ellipsis,
        **axis_kwargs
    ) -> "BECWaveform1D": ...

    @overload
    def add_widget(
        self,
        widget_type: "Literal['PlotBase']" = "PlotBase",
        widget_id: "str" = Ellipsis,
        row: "int" = Ellipsis,
        col: "int" = Ellipsis,
        config: "dict" = Ellipsis,
        **axis_kwargs
    ) -> "BECPlotBase": ...

    @rpc_call
    def add_widget(
        self,
        widget_type: "Literal['PlotBase', 'Waveform1D']" = "PlotBase",
        widget_id: "str" = None,
        row: "int" = None,
        col: "int" = None,
        config: "dict" = None,
        **axis_kwargs
    ) -> "BECPlotBase":
        """
        Add a widget to the figure at the specified position.
        Args:
            widget_type(Literal["PlotBase","Waveform1D"]): The type of the widget to add.
            widget_id(str): The unique identifier of the widget. If not provided, a unique ID will be generated.
            row(int): The row coordinate of the widget in the figure. If not provided, the next empty row will be used.
            col(int): The column coordinate of the widget in the figure. If not provided, the next empty column will be used.
            config(dict): Additional configuration for the widget.
            **axis_kwargs(dict): Additional axis properties to set on the widget after creation.
        """

    @rpc_call
    def remove(
        self,
        row: "int" = None,
        col: "int" = None,
        widget_id: "str" = None,
        coordinates: "tuple[int, int]" = None,
    ) -> "None":
        """
        Remove a widget from the figure. Can be removed by its unique identifier or by its coordinates.
        Args:
            row(int): The row coordinate of the widget to remove.
            col(int): The column coordinate of the widget to remove.
            widget_id(str): The unique identifier of the widget to remove.
            coordinates(tuple[int, int], optional): The coordinates of the widget to remove.
        """
